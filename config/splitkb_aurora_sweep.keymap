#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LAYER_DEF 0
#define LAYER_NUM 1
#define LAYER_SYM 2
#define LAYER_NAV 3
#define LAYER_LMOD 4
#define LAYER_RMOD 5
#define LAYER_FUN 7

#define P_LCTRL 13
#define P_LSHFT 12
#define P_LGUI 11
#define P_LALT 10

#define P_RCTRL 16
#define P_RSHFT 17
#define P_RGUI 18
#define P_RALT 19

// hold-tap behavior that take two macros, one activated on hold, one activated on tap
#define HOLDTAP_MACRO(NAME, MACRO_HOLD, MACRO_TAP) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  flavor = "tap-preferred"; \
  tapping-term-ms = <200>; \
  bindings = <MACRO_HOLD>, <MACRO_TAP>; \
};

// macro behavior that take multiple keys which are activated when the macro is hold
#define MACRO_HOLD(NAME, BINDINGS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <&macro_press BINDINGS>, <&macro_pause_for_release> , <&macro_release BINDINGS>; \
};

// macro behavior that take multiple keys which are activated when the macro is tap
#define MACRO_TAP(NAME, BINDINGS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <BINDINGS>; \
};

// sticky key behavior that take a macro as bindings
#define SKQ_MACRO(NAME, MACRO) \
NAME: NAME { \
  compatible = "zmk,behavior-sticky-key"; \
  label = #NAME; \
  #binding-cells = <1>; \
  bindings = <MACRO>; \
  release-after-ms = <200>; \
  quick-release; \
  ignore-modifiers; \
};

// combo behavior that take a hold-tap as bindings
#define COMBO_HOLDTAP(NAME, TIMEOUT, POSITION, HOLDTAP) \
NAME { \
  layers = <LAYER_DEF>; \
  timeout-ms = <TIMEOUT>; \
  slow-release; \
  key-positions = <POSITION>; \
  bindings = <&HOLDTAP 0 0>; \
};

#define TAPDANCE(NAME, TAP_1, TAP_2) \
NAME: NAME { \
  compatible = "zmk,behavior-tap-dance"; \
  label = #NAME; \
  #binding-cells = <0>; \
  tapping-term-ms = <200>; \
  bindings = <TAP_1>, <TAP_2>; \
};

#define TAPDANCE_3(NAME, TAP_1, TAP_2, TAP_3) \
NAME: NAME { \
  compatible = "zmk,behavior-tap-dance"; \
  label = #NAME; \
  #binding-cells = <0>; \
  tapping-term-ms = <200>; \
  bindings = <TAP_1>, <TAP_2>, <TAP_3>; \
};

/ {

  behaviors {
    // sticky key behavior with quick-release option that deactivate the sticky key on the next key being pressed
    skq: sk_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "sk_quick_release";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      /delete-property/ ignore-modifiers;
     };

    // sticky key behavior with ignore-modifiers option for use with multiple modifiers like LC(LSHFT)
    skqx: skq_multiple_modifiers {
      compatible = "zmk,behavior-sticky-key";
      label = "skq_multiple_modifiers";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      ignore-modifiers;
     };

     // SKQ_MACRO(NAME, MACRO)

     SKQ_MACRO(skqm_tap_num_lctrl, &mc_hold_num_lctrl)
     SKQ_MACRO(skqm_tap_num_lshft, &mc_hold_num_lshft)
     SKQ_MACRO(skqm_tap_num_lgui, &mc_hold_num_lgui)
     SKQ_MACRO(skqm_tap_num_lalt, &mc_hold_num_lalt)

     // TAPDANCE(NAME, TAP_1, TAP_2)

     TAPDANCE(td_special_a, &mc_grave_a, &mc_circumflex_a)
     TAPDANCE(td_special_i, &mc_circumflex_i, &mc_trema_i)
     TAPDANCE(td_special_e, &mc_circumflex_e, &mc_trema_e)
     TAPDANCE_3(td_special_u, &mc_grave_u, &mc_circumflex_u, &mc_trema_u)

     // HOLDTAP_MACRO(NAME, MACRO_HOLD, MACRO_TAP)

     HOLDTAP_MACRO(ht_lctrl, &mc_hold_lctrl, &mc_tap_lctrl)
     HOLDTAP_MACRO(ht_lctrl_lshft, &mc_hold_lctrl_lshft, &mc_tap_lctrl_lshft)
     HOLDTAP_MACRO(ht_rctrl, &mc_hold_rctrl, &mc_tap_rctrl)
     HOLDTAP_MACRO(ht_rctrl_rshft, &mc_hold_rctrl_rshft, &mc_tap_rctrl_rshft)
     HOLDTAP_MACRO(ht_lgui, &mc_hold_lgui, &mc_tap_lgui)
     HOLDTAP_MACRO(ht_lgui_lshft, &mc_hold_lgui_lshft, &mc_tap_lgui_lshft)
     HOLDTAP_MACRO(ht_rgui, &mc_hold_rgui, &mc_tap_rgui)
     HOLDTAP_MACRO(ht_rgui_rshft, &mc_hold_rgui_rshft, &mc_tap_rgui_rshft)
     HOLDTAP_MACRO(ht_lalt, &mc_hold_lalt, &mc_tap_lalt)
     HOLDTAP_MACRO(ht_lalt_lshft, &mc_hold_lalt_lshft, &mc_tap_lalt_lshft)
     HOLDTAP_MACRO(ht_ralt, &mc_hold_ralt, &mc_tap_ralt)
     HOLDTAP_MACRO(ht_ralt_rshft, &mc_hold_ralt_rshft, &mc_tap_ralt_rshft)
     HOLDTAP_MACRO(ht_lshft, &mc_hold_lshft, &mc_tap_lshft)
     HOLDTAP_MACRO(ht_rshft, &mc_hold_rshft, &mc_tap_rshft)
     HOLDTAP_MACRO(ht_num_lctrl, &mc_hold_num_lctrl, &mc_tap_num_lctrl)
     HOLDTAP_MACRO(ht_num_lshft, &mc_hold_num_lshft, &mc_tap_num_lshft)
     HOLDTAP_MACRO(ht_num_lgui, &mc_hold_num_lgui, &mc_tap_num_lgui)
     HOLDTAP_MACRO(ht_num_lalt, &mc_hold_num_lalt, &mc_tap_num_lalt)
  };

  macros {
    // MACRO_HOLD(NAME, BINDINGS)

    MACRO_HOLD(mc_hold_lctrl, &mo LAYER_LMOD &kp LCTRL)
    MACRO_HOLD(mc_hold_lctrl_lshft, &mo LAYER_LMOD &kp LC(LSHFT))
    MACRO_HOLD(mc_hold_rctrl, &mo LAYER_RMOD &kp RCTRL)
    MACRO_HOLD(mc_hold_rctrl_rshft, &mo LAYER_RMOD &kp RC(RSHFT))
    MACRO_HOLD(mc_hold_lgui, &mo LAYER_LMOD &kp LGUI)
    MACRO_HOLD(mc_hold_lgui_lshft, &mo LAYER_LMOD &kp LG(LSHFT))
    MACRO_HOLD(mc_hold_rgui, &mo LAYER_RMOD &kp RGUI)
    MACRO_HOLD(mc_hold_rgui_rshft, &mo LAYER_RMOD &kp RG(RSHFT))
    MACRO_HOLD(mc_hold_lalt, &mo LAYER_LMOD &kp LALT)
    MACRO_HOLD(mc_hold_lalt_lshft, &mo LAYER_LMOD &kp LA(LSHFT))
    MACRO_HOLD(mc_hold_ralt, &mo LAYER_RMOD &kp RALT)
    MACRO_HOLD(mc_hold_ralt_rshft, &mo LAYER_RMOD &kp RA(RSHFT))
    MACRO_HOLD(mc_hold_lshft, &mo LAYER_LMOD &kp LSHFT)
    MACRO_HOLD(mc_hold_rshft, &mo LAYER_RMOD &kp RSHFT)
    MACRO_HOLD(mc_hold_num_lctrl, &mo LAYER_NUM &kp LCTRL)
    MACRO_HOLD(mc_hold_num_lshft, &mo LAYER_NUM &kp LSHFT)
    MACRO_HOLD(mc_hold_num_lgui, &mo LAYER_NUM &kp LGUI)
    MACRO_HOLD(mc_hold_num_lalt, &mo LAYER_NUM &kp LALT)

    // MACRO_TAP(NAME, BINDINGS)

    MACRO_TAP(mc_tap_lctrl, &skq LCTRL)
    MACRO_TAP(mc_tap_lctrl_lshft, &skqx LC(LSHFT))
    MACRO_TAP(mc_tap_rctrl, &skq RCTRL)
    MACRO_TAP(mc_tap_rctrl_rshft, &skqx RC(RSHFT))
    MACRO_TAP(mc_tap_lgui, &skq LGUI)
    MACRO_TAP(mc_tap_lgui_lshft, &skqx LG(LSHFT))
    MACRO_TAP(mc_tap_rgui, &skq RGUI)
    MACRO_TAP(mc_tap_rgui_rshft, &skqx RG(RSHFT))
    MACRO_TAP(mc_tap_lalt, &skq LALT)
    MACRO_TAP(mc_tap_lalt_lshft, &skqx LA(LSHFT))
    MACRO_TAP(mc_tap_ralt, &skq RALT)
    MACRO_TAP(mc_tap_ralt_rshft, &skqx RA(RSHFT))
    MACRO_TAP(mc_tap_lshft, &skq LSHFT)
    MACRO_TAP(mc_tap_rshft, &skq RSHFT)

    // can't use two sticky keys like sk and sl in a macro because they are indexed by key position
    // https://github.com/zmkfirmware/zmk/issues/1421
    // the workaround is to create a custom sticky key behavior with a hold macro as binding
    MACRO_TAP(mc_tap_num_lctrl, &skqm_tap_num_lctrl 0)
    MACRO_TAP(mc_tap_num_lshft, &skqm_tap_num_lshft 0)
    MACRO_TAP(mc_tap_num_lgui, &skqm_tap_num_lgui 0)
    MACRO_TAP(mc_tap_num_lalt, &skqm_tap_num_lalt 0)

    MACRO_TAP(mc_grave_a, &kp RA(GRAVE) &kp A)
    MACRO_TAP(mc_grave_e, &kp RA(GRAVE) &kp E)
    MACRO_TAP(mc_grave_u, &kp RA(GRAVE) &kp U)
    MACRO_TAP(mc_circumflex_a, &kp RA(NUMBER_6) &kp A)
    MACRO_TAP(mc_circumflex_o, &kp RA(NUMBER_6) &kp O)
    MACRO_TAP(mc_circumflex_e, &kp RA(NUMBER_6) &kp E)
    MACRO_TAP(mc_circumflex_u, &kp RA(NUMBER_6) &kp U)
    MACRO_TAP(mc_circumflex_i, &kp RA(NUMBER_6) &kp I)
    MACRO_TAP(mc_trema_e, &kp RA(RS(SQT)) &kp E)
    MACRO_TAP(mc_trema_u, &kp RA(RS(SQT)) &kp U)
    MACRO_TAP(mc_trema_i, &kp RA(RS(SQT)) &kp I)
    MACRO_TAP(mc_acute_e, &kp RA(E))
    MACRO_TAP(mc_cedilla_c, &kp RA(COMMA))
  };

  combos {
    compatible = "zmk,combos";

    cb_tab { layers = <LAYER_DEF LAYER_RMOD>; timeout-ms = <30>; key-positions = <12 13>; bindings = <&kp TAB>; };
    cb_esc { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <1 2>; bindings = <&kp ESC>; };
    cb_bspc { layers = <LAYER_DEF LAYER_NAV LAYER_RMOD>; timeout-ms = <30>; key-positions = <11 12>; bindings = <&kp BSPC>; };
    cb_repeat { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <2 3>; bindings = <&key_repeat>; };
    cb_enter_l { layers = <LAYER_DEF LAYER_NAV LAYER_RMOD>; timeout-ms = <70>; key-positions = <11 12 13>; bindings = <&kp ENTER>; };
    cb_enter_r { layers = <LAYER_DEF>; timeout-ms = <70>; key-positions = <16 17 18>; bindings = <&kp ENTER>; };
    cb_del_l { layers = <LAYER_DEF LAYER_NAV LAYER_RMOD>; timeout-ms = <70>; key-positions = <21 22 23>; bindings = <&kp DEL>; };
    cb_del_r { layers = <LAYER_DEF LAYER_NAV LAYER_LMOD>; timeout-ms = <70>; key-positions = <26 27 28>; bindings = <&kp DEL>; };
    cb_caps { layers = <LAYER_DEF>; timeout-ms = <40>; key-positions = <26 27>; bindings = <&caps_word>; };
    cb_boot_l { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <31 24>; bindings = <&bootloader>; };
    cb_boot_r { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <32 25>; bindings = <&bootloader>; };

    // french special characters
    cb_special_a { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <11 1>; bindings = <&td_special_a>; };
    cb_acute_e { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <12 2>; bindings = <&mc_acute_e>; };
    cb_grave_e { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <13 3>; bindings = <&mc_grave_e>; };
    cb_circumflex_o { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <21 11>; bindings = <&mc_circumflex_o>; };
    cb_special_e { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <22 12>; bindings = <&td_special_e>; };
    cb_special_u { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <23 13>; bindings = <&td_special_u>; };
    cb_special_i { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <24 14>; bindings = <&td_special_i>; };
    cb_cedilla_c { layers = <LAYER_DEF>; timeout-ms = <100>; key-positions = <17 7>; bindings = <&mc_cedilla_c>; };

    // sticky modifiers on layer default
    // COMBO_HOLDTAP(NAME, TIMEOUT, POSITION, HOLDTAP)
    COMBO_HOLDTAP(cb_lctrl, 30, 31 P_LCTRL, ht_lctrl)
    COMBO_HOLDTAP(cb_lctrl_lshft, 30, 31 P_LCTRL P_LSHFT, ht_lctrl_lshft)
    COMBO_HOLDTAP(cb_rctrl, 30, 32 P_RCTRL, ht_rctrl)
    COMBO_HOLDTAP(cb_rctrl_rshft, 30, 32 P_RCTRL P_RSHFT, ht_rctrl_rshft)
    COMBO_HOLDTAP(cb_lgui, 30, 31 P_LGUI, ht_lgui)
    COMBO_HOLDTAP(cb_lgui_lshft, 30, 31 P_LGUI P_LSHFT, ht_lgui_lshft)
    COMBO_HOLDTAP(cb_rgui, 30, 32 P_RGUI, ht_rgui)
    COMBO_HOLDTAP(cb_rgui_rshft, 30, 32 P_RGUI P_RSHFT, ht_rgui_rshft)
    COMBO_HOLDTAP(cb_lalt, 30, 31 P_LALT, ht_lalt)
    COMBO_HOLDTAP(cb_lalt_lshft, 30, 31 P_LALT P_LSHFT, ht_lalt_lshft)
    COMBO_HOLDTAP(cb_ralt, 30, 32 P_RALT, ht_ralt)
    COMBO_HOLDTAP(cb_ralt_rshft, 30, 32 P_RALT P_RSHFT, ht_ralt_rshft)
    COMBO_HOLDTAP(cb_lshft, 30, 31 P_LSHFT, ht_lshft)
    COMBO_HOLDTAP(cb_rshft, 30, 32 P_RSHFT, ht_rshft)

    // sticky modifiers on layer num
    // COMBO_HOLDTAP(NAME, TIME, POS, HT)
    COMBO_HOLDTAP(cb_num_lctrl, 30, 30 P_LCTRL, ht_num_lctrl)
    COMBO_HOLDTAP(cb_num_lshft, 30, 30 P_LSHFT, ht_num_lshft)
    COMBO_HOLDTAP(cb_num_lgui, 30, 30 P_LGUI, ht_num_lgui)
    COMBO_HOLDTAP(cb_num_lalt, 30, 30 P_LALT, ht_num_lalt)
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <LAYER_SYM LAYER_NAV>;
      then-layer = <6>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default {
      bindings = <
      &kp SQT &kp COMMA &kp DOT &kp P &kp Y              &kp F &kp G &kp C &kp R &kp L
      &kp A &kp O &kp E &kp U &kp I                      &kp D &kp H &kp T &kp N &kp S
      &kp SEMI &kp Q &kp J &kp K &kp X                   &kp B &kp M &kp W &kp V &kp Z
      &sl LAYER_NUM &sl LAYER_SYM &sl LAYER_NAV &kp SPACE
      >;
    };

    numbers {
      bindings = <
        &none &none &none &none &none                    &kp NUMBER_9 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4
        &none &none &none &none &none                    &kp EQUAL &kp PLUS &kp MINUS &kp SLASH &kp STAR
        &sl LAYER_FUN &trans &trans &trans
        >;
    };

    symbols {
      bindings = <
        &kp GRAVE &kp MINUS &kp EQUAL &kp PLUS &none     &kp AT &kp LBKT &kp RBKT &kp SLASH &kp BSLH
        &kp EXCL &kp QUESTION &kp HASH &kp STAR &none    &kp TILDE &kp LPAR &kp RPAR &kp CARET &kp DLLR
        &kp AMPS &kp PIPE &kp UNDER &kp PRCNT &none      &none &kp LBRC &kp RBRC &none &none
        &trans &trans &trans &trans
        >;
    };

    navigation {
      bindings = <
        &kp HOME &kp END &kp PG_DN &kp PG_UP &none       &none &none &none &none &none
        &kp LEFT &kp RIGHT &kp DOWN &kp UP &kp PRCNT     &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &none &none &none &none &none                    &none &kp C_BRI_UP &kp C_BRI_DN &kp C_VOL_UP &kp C_VOL_DN
        &trans &trans &trans &trans
        >;
    };

    mods_left {
      bindings = <
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &trans &trans &trans &trans &trans
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &trans &trans &trans &trans
        >;
    };

    mods_right {
      bindings = <
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans &trans               &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans
        >;
    };

    tri {
      bindings = <
        &none &none &none &none &none                    &none &none &none &none &none
        &none &none &none &none &none                    &none &none &none &none &none
        &trans &trans &trans &trans                      &none &none &none &none &none
        >;
    };

    functions {
      bindings = <
        &none &none &none &none &none                    &none &kp F5 &kp F6 &kp F7 &kp F8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &none &kp F1 &kp F2 &kp F3 &kp F4
        &trans &trans &trans &trans                      &none &kp F9 &kp F10 &kp F11 &kp F12
        >;
    };
  };
};
