#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUM 1
#define SYM 2
#define NAV 3
#define MOD_L 4
#define MOD_R 5
#define FUN 7

#define HT(name, macro, skq) \
name: name { \
  label = #name; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  flavor = "tap-preferred"; \
  tapping-term-ms = <200>; \
  bindings = <macro>, <skq>; \
};

&sk {
  quick-release;
  /delete-property/ ignore-modifiers;
};

/ {

  behaviors {
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
      ignore-modifiers;
     };

     ht_lctrl: ht_lctrl {
         compatible = "zmk,behavior-hold-tap";
         label = "ht_lctrl";
         #binding-cells = <2>;
         flavor = "tap-preferred";
         tapping-term-ms = <200>;
         bindings = <&mc_lctrl>, <&skq>;
     };

     // ht_rctrl: ht_rctrl {
     //     compatible = "zmk,behavior-hold-tap";
     //     label = "ht_rctrl";
     //     #binding-cells = <2>;
     //     flavor = "tap-preferred";
     //     tapping-term-ms = <200>;
     //     bindings = <&mc_rctrl>, <&skq>;
     // };

     HT(ht_rctrl, &mc_rctrl, &skq)
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <SYM NAV>;
      then-layer = <6>;
    };
  };

  macros {
    // hold : modifiers layer,  tap : sticky modifier
    ZMK_MACRO(mc_lctrl, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_press &mo MOD_L &kp LCTRL>, <&macro_pause_for_release> , <&macro_release &mo MOD_L &kp LCTRL>;)
    ZMK_MACRO(mc_rctrl, wait-ms = <0>; tap-ms = <0>; bindings = <&macro_press &mo MOD_R &kp RCTRL>, <&macro_pause_for_release> , <&macro_release &mo MOD_R &kp RCTRL>;)

    // hold : numbers layer + modifier
    ZMK_MACRO(m_num_ctrl, bindings = <&macro_press &mo NUM &kp LCTRL>, <&macro_pause_for_release> , <&macro_release &mo NUM &kp LCTRL>;)
    ZMK_MACRO(m_num_shft, bindings = <&macro_press &mo NUM &kp LSHFT>, <&macro_pause_for_release> , <&macro_release &mo NUM &kp LSHFT>;)
    ZMK_MACRO(m_num_gui, bindings = <&macro_press &mo NUM &kp LGUI>, <&macro_pause_for_release> , <&macro_release &mo NUM &kp LGUI>;)
    ZMK_MACRO(m_num_alt, bindings = <&macro_press &mo NUM &kp LALT>, <&macro_pause_for_release> , <&macro_release &mo NUM &kp LALT>;)
  };

  combos {
    compatible = "zmk,combos";

    combo_tab { layers = <0 MOD_R>; timeout-ms = <30>; key-positions = <12 13>; bindings = <&kp TAB>; };
    combo_esc { layers = <0>; timeout-ms = <30>; key-positions = <11 12>; bindings = <&kp ESC>; };
    combo_repeat { layers = <0>; timeout-ms = <30>; key-positions = <2 3>; bindings = <&key_repeat>; };
    combo_bspc { layers = <0 NAV MOD_R>; timeout-ms = <60>; key-positions = <11 12 13>; bindings = <&kp BSPC>; };
    combo_enter { layers = <0>; timeout-ms = <60>; key-positions = <16 17 18>; bindings = <&kp ENTER>; };
    combo_del_l { layers = <0 NAV MOD_R>; timeout-ms = <60>; key-positions = <21 22 23>; bindings = <&kp DEL>; };
    combo_del_r { layers = <0 NAV MOD_L>; timeout-ms = <60>; key-positions = <26 27 28>; bindings = <&kp DEL>; };
    combo_caps { layers = <0>; timeout-ms = <40>; key-positions = <26 27>; bindings = <&caps_word>; };

    // sticky modifiers left
    combo_ctrl_l { layers = <0>; timeout-ms = <30>; slow-release; key-positions = <31 13>; bindings = <&ht_lctrl 0 LCTRL>; };
    combo_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 12>; bindings = <&sk LSHFT>; };
    combo_gui_l { layers = <0>; timeout-ms = <30>; key-positions = <31 11>; bindings = <&sk LGUI>; };
    combo_alt_l { layers = <0>; timeout-ms = <30>; key-positions = <31 10>; bindings = <&sk LALT>; };
    combo_ctrl_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 12 13>; bindings = <&sk LC(LSHFT)>; };
    combo_ctrl_alt_l { layers = <0>; timeout-ms = <30>; key-positions = <31 13 10>; bindings = <&sk LC(LALT)>; };
    combo_gui_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 12 11>; bindings = <&sk LG(LSHFT)>; };

    // sticky modifiers right
    combo_ctrl_r { layers = <0>; timeout-ms = <30>; slow-release; key-positions = <32 16>; bindings = <&ht_rctrl 0 RCTRL>; };
    combo_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 17>; bindings = <&sk RSHFT>; };
    combo_gui_r { layers = <0>; timeout-ms = <30>; key-positions = <32 18>; bindings = <&sk RGUI>; };
    combo_alt_r { layers = <0>; timeout-ms = <30>; key-positions = <32 19>; bindings = <&sk RALT>; };
    combo_ctrl_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 16 17>; bindings = <&sk RC(RSHFT)>; };
    combo_ctrl_alt_r { layers = <0>; timeout-ms = <30>; key-positions = <32 16 19>; bindings = <&sk RC(RALT)>; };
    combo_gui_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 18 19>; bindings = <&sk RG(RSHFT)>; };

    // modifiers numbers
    combo_ctrl_numbers { layers = <0>; timeout-ms = <30>; key-positions = <30 13>; bindings = <&m_num_ctrl>; };
  };

  keymap {
    compatible = "zmk,keymap";

    default {
      bindings = <
      &kp SQT &kp COMMA &kp DOT &kp P &kp Y              &kp F &kp G &kp C &kp R &kp L
      &kp A &kp O &kp E &kp U &kp I                      &kp D &kp H &kp T &kp N &kp S
      &kp SEMI &kp Q &kp J &kp K &kp X                   &kp B &kp M &kp W &kp V &kp Z
      &sl NUM &sl SYM &sl NAV &kp SPACE
      >;
    };

    numbers {
      bindings = <
        &none &none &none &none &none                    &kp NUMBER_9 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4
        &none &none &none &none &none                    &kp EQUAL &kp PLUS &kp MINUS &kp SLASH &kp STAR
        &sl FUN &trans &trans &trans
        >;
    };

    symbols {
      bindings = <
        &kp GRAVE &kp MINUS &kp EQUAL &kp PLUS &none     &kp AT &kp LBKT &kp RBKT &kp SLASH &kp BSLH
        &kp EXCL &kp QUESTION &kp HASH &kp STAR &none    &kp TILDE &kp LPAR &kp RPAR &kp CARET &kp DLLR
        &kp AMPS &kp PIPE &kp UNDER &kp PRCNT &none      &none &kp LBRC &kp RBRC &none &none
        &trans &trans &trans &trans
        >;
    };

    navigation {
      bindings = <
        &kp HOME &kp END &kp PG_DN &kp PG_UP &none       &none &none &none &none &none
        &kp LEFT &kp RIGHT &kp DOWN &kp UP &kp PRCNT     &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &none &none &none &none &none                    &none &kp C_BRI_UP &kp C_BRI_DN &kp C_VOL_UP &kp C_VOL_DN
        &trans &trans &trans &trans
        >;
    };

    mods_left {
      bindings = <
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &trans &trans &trans &trans &trans
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &trans &trans &trans &trans
        >;
    };

    mods_right {
      bindings = <
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans &trans               &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans
        >;
    };

    tri {
      bindings = <
        &none &none &none &none &none                    &none &none &none &none &none
        &none &none &none &none &none                    &none &none &none &none &none
        &trans &trans &trans &trans                      &none &none &none &none &none
        >;
    };

    functions {
      bindings = <
        &none &none &none &none &none                    &none &kp F5 &kp F6 &kp F7 &kp F8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &none &kp F1 &kp F2 &kp F3 &kp F4
        &trans &trans &trans &trans                      &none &kp F9 &kp F10 &kp F11 &kp F12
        >;
    };
  };
};
