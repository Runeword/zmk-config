/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {

  /* conditional_layers { */
  /*   compatible = "zmk,conditional-layers"; */
  /*   tri_layer { */
  /*     if-layers = <2 3>; */
  /*     then-layer = <4>; */
  /*   }; */
  /* }; */

macros {
        zed_em_kay: zed_em_kay {
            label = "ZM_zed_em_kay";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
              = <&macro_press &sl 4 &kp LCTRL>
              , <&macro_pause_for_release>
              , <&macro_release &sl 4 &kp LCTRL>;
        };
    };

  combos {
    compatible = "zmk,combos";

    combo_tab { layers = <0>; timeout-ms = <40>; key-positions = <17 18>; bindings = <&kp TAB>; };
    combo_esc { layers = <0>; timeout-ms = <20>; key-positions = <11 12>; bindings = <&kp ESC>; };
    combo_repeat { layers = <0>; timeout-ms = <20>; key-positions = <12 13>; bindings = <&key_repeat>; };
    combo_bspc { layers = <0 3>; timeout-ms = <50>; key-positions = <11 12 13>; bindings = <&kp BSPC>; };
    combo_enter { layers = <0>; timeout-ms = <50>; key-positions = <16 17 18>; bindings = <&kp ENTER>; };
    combo_del { layers = <0 3>; timeout-ms = <50>; key-positions = <21 22 23>; bindings = <&kp DEL>; };
    combo_caps { layers = <0>; timeout-ms = <40>; key-positions = <26 27>; bindings = <&caps_word>; };

    // sticky modifiers left

    /* combo_ctrl_l { layers = <0>; timeout-ms = <30>; key-positions = <31 13>; bindings = <&macro_l5>; }; */
    combo_ctrl_l { layers = <0>; timeout-ms = <30>; key-positions = <31 13>; bindings = <&sk LCTRL>; };
    combo_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 12>; bindings = <&sk LSHFT>; };
    combo_gui_l { layers = <0>; timeout-ms = <30>; key-positions = <31 11>; bindings = <&sk LGUI>; };
    combo_alt_l { layers = <0>; timeout-ms = <30>; key-positions = <31 10>; bindings = <&sk LALT>; };
    combo_ctrl_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 13 12>; bindings = <&sk LC(LSHFT)>; };
    combo_ctrl_alt_l { layers = <0>; timeout-ms = <30>; key-positions = <31 13 10>; bindings = <&sk LC(LALT)>; };
    combo_gui_shft_l { layers = <0>; timeout-ms = <30>; key-positions = <31 12 11>; bindings = <&sk LG(LSHFT)>; };

    // sticky modifiers right

    combo_ctrl_r { layers = <0>; timeout-ms = <30>; key-positions = <32 16>; bindings = <&sk RCTRL>; };
    combo_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 17>; bindings = <&sk RSHFT>; };
    combo_gui_r { layers = <0>; timeout-ms = <30>; key-positions = <32 18>; bindings = <&sk RGUI>; };
    combo_alt_r { layers = <0>; timeout-ms = <30>; key-positions = <32 19>; bindings = <&sk RALT>; };
    combo_ctrl_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 16 17>; bindings = <&sk RC(RSHFT)>; };
    combo_ctrl_alt_r { layers = <0>; timeout-ms = <30>; key-positions = <32 16 19>; bindings = <&sk RC(RALT)>; };
    combo_gui_shft_r { layers = <0>; timeout-ms = <30>; key-positions = <32 18 19>; bindings = <&sk RG(RSHFT)>; };
  };

  keymap {
    compatible = "zmk,keymap";

    layer_default {
      bindings = <
      &kp SQT &kp COMMA &kp DOT &kp P &kp Y            &kp F &kp G &kp C &kp R &kp L
      &kp A &kp O &kp E &kp U &kp I                    &kp D &kp H &kp T &kp N &kp S
      &kp SEMI &kp Q &kp J &kp K &kp X                 &kp B &kp M &kp W &kp V &kp Z
      &sl 1 &sl 2 &sl 3 &kp SPACE
      >;
    };

    layer_numbers {
      bindings = <
        &none &none &none &none &none                  &kp NUMBER_9 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none    &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4
        &none &none &none &none &none                  &kp EQUAL &kp PLUS &kp MINUS &kp SLASH &kp STAR
        &trans &trans &trans &trans
        >;
    };

    layer_symbols_right {
      bindings = <
        &none &none &none &none &none                  &kp AT &kp LBKT &kp RBKT &kp SLASH &kp BSLH
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none    &kp TILDE &kp LPAR &kp RPAR &kp CARET &kp DLLR
        &none &none &none &none &none                  &none &kp LBRC &kp RBRC &none &none
        &trans &trans &trans &trans
        >;
    };

    layer_symbols_left {
      bindings = <
        &kp GRAVE &kp EXCL &kp QMARK &kp PIPE &kp AMPS   &none &none &none &none &none
        &kp LEFT &kp RIGHT &kp DOWN &kp UP &kp PRCNT     &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &kp COLON &kp UNDER &kp HASH &kp STAR &none      &none &none &none &none &none
        &trans &trans &trans &trans
        >;
    };

    /* layer_nav { */
    /*   bindings = < */
    /*     &kp HOME &kp END &kp PG_DN &kp PG_UP &none     &none &none &none &none &none */
    /*     &kp LEFT &kp RIGHT &kp DOWN &kp UP &none       &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT */
    /*     &none &none &none &none &none                  &none &kp C_BRI_UP &kp C_BRI_DN &kp C_VOL_UP &kp C_VOL_DN */
    /*     &trans &trans &trans &trans */
    /*     >; */
    /* }; */

    layer_mods_left {
      bindings = <
        &none &none &none &none &none                  &none &none &none &none &none
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none    &none &none &none &none &none
        &none &none &none &none &none                  &none &none &none &none &none
        &trans &trans &trans &trans
        >;
    };
  };
};
