#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LAYER_DEF 0
#define LAYER_NUM 1
#define LAYER_SYM 2
#define LAYER_NAV 3
#define LAYER_LMOD 4
#define LAYER_RMOD 5
#define LAYER_FUN 7

#define HOLDTAP_MOD(NAME, MACRO, TAP) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  flavor = "tap-preferred"; \
  tapping-term-ms = <200>; \
  bindings = <MACRO>, <TAP>; \
};

#define MACRO_MOD(NAME, MO, MOD) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <&macro_press &mo MO &kp MOD>, <&macro_pause_for_release> , <&macro_release &mo MO &kp MOD>; \
};

#define MACRO_SKQ(NAME, KEY) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <&skq KEY>; \
};

#define COMBO_HT(NAME, TIME, POS, HT) \
NAME { \
  layers = <LAYER_DEF>; \
  timeout-ms = <TIME>; \
  slow-release; \
  key-positions = <POS>; \
  bindings = <&HT 0 0>; \
};

&sk {
  quick-release;
  /delete-property/ ignore-modifiers;
};

/ {

  behaviors {
    skq: sk_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "sk_quick_release";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      ignore-modifiers;
     };

    skqm: skq_combine_modifiers {
      compatible = "zmk,behavior-sticky-key";
      label = "skq_combine_modifiers";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      /delete-property/ ignore-modifiers;
     };

     // HOLDTAP_MOD(NAME, HOLD, TAP)
     HOLDTAP_MOD(ht_lctrl, &mc_hold_lctrl, &mc_tap_lctrl)
     HOLDTAP_MOD(ht_lctrl_lshft, &mc_hold_lctrl_lshft, &mc_tap_lctrl_lshft)
     HOLDTAP_MOD(ht_rctrl, &mc_hold_rctrl, &mc_tap_rctrl)
     HOLDTAP_MOD(ht_lshft, &mc_hold_lshft, &mc_tap_lshft)
     HOLDTAP_MOD(ht_rshft, &mc_hold_rshft, &mc_tap_rshft)
     HOLDTAP_MOD(ht_lgui, &mc_hold_lgui, &mc_tap_lgui)
     HOLDTAP_MOD(ht_rgui, &mc_hold_rgui, &mc_tap_rgui)
     HOLDTAP_MOD(ht_lalt, &mc_hold_lalt, &mc_tap_lalt)
     HOLDTAP_MOD(ht_ralt, &mc_hold_ralt, &mc_tap_ralt)
     HOLDTAP_MOD(ht_num_lctrl, &mc_hold_num_lctrl, &mc_tap_num_lctrl)
     HOLDTAP_MOD(ht_num_lshft, &mc_hold_num_lshft, &mc_tap_num_lshft)
     HOLDTAP_MOD(ht_num_lgui, &mc_hold_num_lgui, &mc_tap_num_lgui)
     HOLDTAP_MOD(ht_num_lalt, &mc_hold_num_lalt, &mc_tap_num_lalt)
  };

  macros {
    // MACRO_MOD(NAME, MO, MOD)
    MACRO_MOD(mc_hold_lctrl, LAYER_LMOD, LCTRL)
    MACRO_MOD(mc_hold_lctrl_lshft, LAYER_LMOD, LC(LSHFT))
    MACRO_MOD(mc_hold_rctrl, LAYER_RMOD, RCTRL)
    MACRO_MOD(mc_hold_lshft, LAYER_LMOD, LSHFT)
    MACRO_MOD(mc_hold_rshft, LAYER_RMOD, RSHFT)
    MACRO_MOD(mc_hold_lgui, LAYER_LMOD, LGUI)
    MACRO_MOD(mc_hold_rgui, LAYER_RMOD, RGUI)
    MACRO_MOD(mc_hold_lalt, LAYER_LMOD, LALT)
    MACRO_MOD(mc_hold_ralt, LAYER_RMOD, RALT)
    MACRO_MOD(mc_hold_num_lctrl, LAYER_NUM, LCTRL)
    MACRO_MOD(mc_hold_num_lshft, LAYER_NUM, LSHFT)
    MACRO_MOD(mc_hold_num_lgui, LAYER_NUM, LGUI)
    MACRO_MOD(mc_hold_num_lalt, LAYER_NUM, LALT)

    // MACRO_SKQ(NAME, KEY)
    MACRO_SKQ(mc_tap_lctrl, LCTRL)
    MACRO_SKQ(mc_tap_lctrl_lshft, LC(LSHFT)) // skqm
    MACRO_SKQ(mc_tap_rctrl, RCTRL)
    MACRO_SKQ(mc_tap_lshft, LSHFT)
    MACRO_SKQ(mc_tap_rshft, RSHFT)
    MACRO_SKQ(mc_tap_lgui, LGUI)
    MACRO_SKQ(mc_tap_rgui, RGUI)
    MACRO_SKQ(mc_tap_lalt, LALT)
    MACRO_SKQ(mc_tap_ralt, RALT)
    MACRO_SKQ(mc_tap_num_lctrl, LCTRL) // TODO chain skq + sl
    MACRO_SKQ(mc_tap_num_lshft, LSHFT) // TODO chain skq + sl
    MACRO_SKQ(mc_tap_num_lgui, LGUI) // TODO chain skq + sl
    MACRO_SKQ(mc_tap_num_lalt, LALT) // TODO chain skq + sl
  };

  combos {
    compatible = "zmk,combos";

    combo_tab { layers = <LAYER_DEF LAYER_RMOD>; timeout-ms = <30>; key-positions = <12 13>; bindings = <&kp TAB>; };
    combo_esc { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <11 12>; bindings = <&kp ESC>; };
    combo_repeat { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <2 3>; bindings = <&key_repeat>; };
    combo_bspc { layers = <LAYER_DEF LAYER_NAV LAYER_RMOD>; timeout-ms = <70>; key-positions = <11 12 13>; bindings = <&kp BSPC>; };
    combo_enter { layers = <LAYER_DEF>; timeout-ms = <70>; key-positions = <16 17 18>; bindings = <&kp ENTER>; };
    combo_del_l { layers = <LAYER_DEF LAYER_NAV LAYER_RMOD>; timeout-ms = <70>; key-positions = <21 22 23>; bindings = <&kp DEL>; };
    combo_del_r { layers = <LAYER_DEF LAYER_NAV LAYER_LMOD>; timeout-ms = <70>; key-positions = <26 27 28>; bindings = <&kp DEL>; };
    combo_caps { layers = <LAYER_DEF>; timeout-ms = <40>; key-positions = <26 27>; bindings = <&caps_word>; };

    // sticky modifiers
    // COMBO_HT(NAME, TIME, POS, HT)
    COMBO_HT(combo_lctrl, 30, 31 13, ht_lctrl)
    COMBO_HT(combo_lctrl_lshft, 30, 31 12 13, ht_lctrl_lshft)
    COMBO_HT(combo_rctrl, 30, 32 16, ht_rctrl)
    COMBO_HT(combo_lshft, 30, 31 12, ht_lshft)
    COMBO_HT(combo_rshft, 30, 32 17, ht_rshft)
    COMBO_HT(combo_lgui, 30, 31 11, ht_lgui)
    COMBO_HT(combo_rgui, 30, 32 18, ht_rgui)
    COMBO_HT(combo_lalt, 30, 31 10, ht_lalt)
    COMBO_HT(combo_ralt, 30, 32 19, ht_ralt)
    COMBO_HT(combo_num_lctrl, 30, 30 13, ht_num_lctrl)
    COMBO_HT(combo_num_lshft, 30, 30 12, ht_num_lshft)
    COMBO_HT(combo_num_lgui, 30, 30 11, ht_num_lgui)
    COMBO_HT(combo_num_lalt, 30, 30 10, ht_num_lalt)

    // combo_lctrl_lshft { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <31 12 13>; bindings = <&sk LC(LSHFT)>; };
    combo_lctrl_lalt { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <31 13 10>; bindings = <&sk LC(LALT)>; };
    combo_lgui_lshft { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <31 12 11>; bindings = <&sk LG(LSHFT)>; };
    combo_rctrl_rshft { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <32 16 17>; bindings = <&sk RC(RSHFT)>; };
    combo_rctrl_ralt { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <32 16 19>; bindings = <&sk RC(RALT)>; };
    combo_rgui_rshft { layers = <LAYER_DEF>; timeout-ms = <30>; key-positions = <32 18 19>; bindings = <&sk RG(RSHFT)>; };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <LAYER_SYM LAYER_NAV>;
      then-layer = <6>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default {
      bindings = <
      &kp SQT &kp COMMA &kp DOT &kp P &kp Y              &kp F &kp G &kp C &kp R &kp L
      &kp A &kp O &kp E &kp U &kp I                      &kp D &kp H &kp T &kp N &kp S
      &kp SEMI &kp Q &kp J &kp K &kp X                   &kp B &kp M &kp W &kp V &kp Z
      &sl LAYER_NUM &sl LAYER_SYM &sl LAYER_NAV &kp SPACE
      >;
    };

    numbers {
      bindings = <
        &none &none &none &none &none                    &kp NUMBER_9 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4
        &none &none &none &none &none                    &kp EQUAL &kp PLUS &kp MINUS &kp SLASH &kp STAR
        &sl LAYER_FUN &trans &trans &trans
        >;
    };

    symbols {
      bindings = <
        &kp GRAVE &kp MINUS &kp EQUAL &kp PLUS &none     &kp AT &kp LBKT &kp RBKT &kp SLASH &kp BSLH
        &kp EXCL &kp QUESTION &kp HASH &kp STAR &none    &kp TILDE &kp LPAR &kp RPAR &kp CARET &kp DLLR
        &kp AMPS &kp PIPE &kp UNDER &kp PRCNT &none      &none &kp LBRC &kp RBRC &none &none
        &trans &trans &trans &trans
        >;
    };

    navigation {
      bindings = <
        &kp HOME &kp END &kp PG_DN &kp PG_UP &none       &none &none &none &none &none
        &kp LEFT &kp RIGHT &kp DOWN &kp UP &kp PRCNT     &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &none &none &none &none &none                    &none &kp C_BRI_UP &kp C_BRI_DN &kp C_VOL_UP &kp C_VOL_DN
        &trans &trans &trans &trans
        >;
    };

    mods_left {
      bindings = <
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &trans &trans &trans &trans &trans
        &none &none &none &none &none                    &trans &trans &trans &trans &trans
        &trans &trans &trans &trans
        >;
    };

    mods_right {
      bindings = <
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans &trans               &none &kp RCTRL &kp RSHFT &kp RGUI &kp RALT
        &trans &trans &trans &trans &trans               &none &none &none &none &none
        &trans &trans &trans &trans
        >;
    };

    tri {
      bindings = <
        &none &none &none &none &none                    &none &none &none &none &none
        &none &none &none &none &none                    &none &none &none &none &none
        &trans &trans &trans &trans                      &none &none &none &none &none
        >;
    };

    functions {
      bindings = <
        &none &none &none &none &none                    &none &kp F5 &kp F6 &kp F7 &kp F8
        &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &none      &none &kp F1 &kp F2 &kp F3 &kp F4
        &trans &trans &trans &trans                      &none &kp F9 &kp F10 &kp F11 &kp F12
        >;
    };
  };
};
