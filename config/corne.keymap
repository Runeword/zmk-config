#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

#define la_DEF 0
#define la_NUM 1
#define la_SYM_l 2
#define la_SYM_r 3
#define la_NAV 4
#define la_SPE 5
#define la_FUN 6
#define la_HAR 7
// #define la_LMOD 4
// #define la_RMOD 5

#define po_T0 30
#define po_T1 31
#define po_T2 32
#define po_T3 33

#define po_LC 13
#define po_LS 12
#define po_LG 11
#define po_LA 10

#define po_RC 16
#define po_RS 17
#define po_RG 18
#define po_RA 19

#define po_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33
#define po_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33

#define HM(NAME, HOLD, TAP, TRIGGER_POS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  tapping-term-ms = <270>; \
  quick-tap-ms = <170>; \
  global-quick-tap; \
  flavor = "balanced"; \
  bindings = <HOLD>, <TAP>; \
  hold-trigger-key-positions = <TRIGGER_POS>; \
  hold-trigger-on-release; \
};

#define HMM(NAME, HOLD, TAP, TRIGGER_POS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  tapping-term-ms = <270>; \
  quick-tap-ms = <170>; \
  global-quick-tap; \
  flavor = "balanced"; \
  bindings = <HOLD>, <TAP>; \
};

// hold-tap behavior that take two macros, one activated on hold, one activated on tap
#define HOLDTAP_MACRO(NAME, MACRO_HOLD, MACRO_TAP) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-hold-tap"; \
  #binding-cells = <2>; \
  flavor = "tap-preferred"; \
  tapping-term-ms = <200>; \
  bindings = <MACRO_HOLD>, <MACRO_TAP>; \
};

// macro behavior that take multiple keys which are activated when the macro is hold
#define MACRO_HOLD(NAME, BINDINGS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <&macro_press BINDINGS>, <&macro_pause_for_release> , <&macro_release BINDINGS>; \
};

// macro behavior that take multiple keys which are activated when the macro is tap
#define MACRO_TAP(NAME, BINDINGS) \
NAME: NAME { \
  label = #NAME; \
  compatible = "zmk,behavior-macro"; \
  #binding-cells = <0>; \
  wait-ms = <0>; \
  tap-ms = <0>; \
  bindings = <BINDINGS>; \
};

// sticky key behavior that take a macro as bindings
#define SKQ_MACRO(NAME, MACRO) \
NAME: NAME { \
  compatible = "zmk,behavior-sticky-key"; \
  label = #NAME; \
  #binding-cells = <1>; \
  bindings = <MACRO>; \
  release-after-ms = <200>; \
  quick-release; \
  ignore-modifiers; \
};

// combo behavior that take a hold-tap as bindings
#define COMBO_HOLDTAP(NAME, TIMEOUT, POSITION, HOLDTAP) \
NAME { \
  layers = <la_DEF>; \
  timeout-ms = <TIMEOUT>; \
  slow-release; \
  key-positions = <POSITION>; \
  bindings = <&HOLDTAP 0 0>; \
};

#define COMBO(NAME, TIMEOUT, POSITION, BINDINGS) \
NAME { \
  layers = <la_DEF>; \
  timeout-ms = <TIMEOUT>; \
  slow-release; \
  key-positions = <POSITION>; \
  bindings = BINDINGS; \
};

#define TAPDANCE(NAME, TAP_1, TAP_2) \
NAME: NAME { \
  compatible = "zmk,behavior-tap-dance"; \
  label = #NAME; \
  #binding-cells = <0>; \
  tapping-term-ms = <200>; \
  bindings = <TAP_1>, <TAP_2>; \
};

#define TAPDANCE_3(NAME, TAP_1, TAP_2, TAP_3) \
NAME: NAME { \
  compatible = "zmk,behavior-tap-dance"; \
  label = #NAME; \
  #binding-cells = <0>; \
  tapping-term-ms = <200>; \
  bindings = <TAP_1>, <TAP_2>, <TAP_3>; \
};

/ {

  behaviors {
    HMM(hm_mod_l, &kp, &kp, po_RIGHT)
    HMM(hm_mod_r, &kp, &kp, po_LEFT)
    HM(hm_mo_r, &mo, &kp, po_LEFT)
    HM(hm_mo_l, &mo, &kp, po_RIGHT)

    ht_mo: hold_tap_momentary_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "ht_mo";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <270>;
      quick-tap-ms = <200>;
      bindings = <&mo>, <&kp>;
    };

    ht_mod: hold_tap_modifier {
      compatible = "zmk,behavior-hold-tap";
      label = "ht_mod";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      bindings = <&kp>, <&kp>;
    };

    // &ht_mo_sk la_NAV RSFT
    ht_mo_sk: hold_tap_momentary_layer_sticky_modifier {
      compatible = "zmk,behavior-hold-tap";
      label = "ht_mo_sk";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&skq>;
    };

    // sticky key behavior with quick-release option that deactivate the sticky key on the next key being pressed
    skq: sk_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "sk_quick_release";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      /delete-property/ ignore-modifiers;
     };

    // sticky key behavior with ignore-modifiers option for use with multiple modifiers like LC(LSHFT)
    skqx: skq_multiple_modifiers {
      compatible = "zmk,behavior-sticky-key";
      label = "skq_multiple_modifiers";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <200>;
      quick-release;
      ignore-modifiers;
     };
  };

  macros {
    MACRO_TAP(mc_grave_a,      &kp RA(GRAVE)    &kp A)
    MACRO_TAP(mc_grave_e,      &kp RA(GRAVE)    &kp E)
    MACRO_TAP(mc_grave_u,      &kp RA(GRAVE)    &kp U)
    MACRO_TAP(mc_circumflex_a, &kp RA(NUMBER_6) &kp A)
    MACRO_TAP(mc_circumflex_o, &kp RA(NUMBER_6) &kp O)
    MACRO_TAP(mc_circumflex_e, &kp RA(NUMBER_6) &kp E)
    MACRO_TAP(mc_circumflex_u, &kp RA(NUMBER_6) &kp U)
    MACRO_TAP(mc_circumflex_i, &kp RA(NUMBER_6) &kp I)
    MACRO_TAP(mc_trema_e,      &kp RA(RS(SQT))  &kp E)
    MACRO_TAP(mc_trema_u,      &kp RA(RS(SQT))  &kp U)
    MACRO_TAP(mc_trema_i,      &kp RA(RS(SQT))  &kp I)
    MACRO_TAP(mc_acute_e,      &kp RA(E))
    MACRO_TAP(mc_cedilla_c,    &kp RA(COMMA))
    MACRO_TAP(mc_euro,         &kp RA(NUMBER_5))
    MACRO_TAP(mc_pound,        &kp RA(RS(NUMBER_4)))
    MACRO_TAP(mc_degree,       &kp RA(RS(NUMBER_0)))
    MACRO_TAP(mc_trademark,    &kp RA(V))
    MACRO_TAP(mc_copyright,    &kp RA(C))
  };

  combos {
    compatible = "zmk,combos";

    cb_bspc { layers = <la_DEF la_NAV>; timeout-ms = <30>; key-positions = <11 12>; bindings = <&kp BSPC>; require-prior-idle-ms = <150>; };
    // cb_esc { layers = <la_DEF la_NAV>; timeout-ms = <30>; key-positions = <12 13>; bindings = <&kp ESC>; require-prior-idle-ms = <150>; };
    cb_rep_r { layers = <la_DEF la_NAV>; timeout-ms = <30>; key-positions = <16 17>; bindings = <&key_repeat>; require-prior-idle-ms = <150>; };
    cb_rep_l { layers = <la_DEF la_NAV>; timeout-ms = <30>; key-positions = <12 13>; bindings = <&key_repeat>; require-prior-idle-ms = <150>; };
    cb_del { layers = <la_DEF la_NAV>; timeout-ms = <30>; key-positions = <17 18>; bindings = <&kp DEL>; require-prior-idle-ms = <150>; };
    cb_caps { layers = <la_DEF>; timeout-ms = <40>; key-positions = <26 27>; bindings = <&caps_word>; };
  };

  // conditional_layers {
  //   compatible = "zmk,conditional-layers";
  //   tri_layer {
  //     if-layers = <la_SYM la_NAV>;
  //     then-layer = <6>;
  //   };
  // };

  keymap {
    compatible = "zmk,keymap";

    default {
      bindings = <
      &kp SQT &kp COMMA &kp DOT &kp P &kp Y                                           &kp F &kp G &kp C &kp R &kp L
      &hm_mod_l LALT A &hm_mod_l LGUI O &hm_mod_l LCTL E &hm_mo_l la_SYM_r U &kp I    &kp D &hm_mo_r la_SYM_l H &hm_mod_r RCTL T &hm_mod_r RGUI N &hm_mod_r LALT S
      &kp SEMI &kp Q &kp J &kp K &kp X                                                &kp B &kp M &kp W &kp V &kp Z
      &hm_mo_l la_FUN DEL &hm_mo_l la_NUM ENTER &ht_mo la_NAV TAB &ht_mod LSHFT ESC &hm_mo_r la_SPE SPACE &hm_mo_r la_SPE BSPC
      >;
    };

    numbers {
      bindings = <
        &trans &trans &trans &trans &trans                  &kp NUMBER_9 &kp NUMBER_5 &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8
        &trans &trans &trans &trans &trans                  &kp NUMBER_0 &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4
        &trans &trans &trans &trans &trans                  &kp EQUAL &kp PLUS &kp MINUS &kp SLASH &kp STAR
        &trans &trans &trans &trans &trans &trans
        >;
    };

    symbols_l {
      bindings = <
        &kp GRAVE &kp MINUS &kp EQUAL &kp PLUS &mc_pound    &trans &trans &trans &trans &trans
        &kp EXCL &kp QUESTION &kp STAR &kp HASH &mc_euro    &trans &trans &trans &trans &trans
        &kp AMPS &kp PIPE &kp UNDER &kp PRCNT &mc_degree    &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans &trans
        >;
    };

    symbols_r {
      bindings = <
        &trans &trans &trans &trans &trans                  &kp AT &kp LBKT &kp RBKT &kp SLASH &kp BSLH
        &trans &trans &trans &trans &trans                  &kp TILDE &kp LPAR &kp RPAR &kp CARET &kp DLLR
        &trans &trans &trans &trans &trans                  &none &kp LBRC &kp RBRC &mc_trademark &mc_copyright
        &trans &trans &trans &trans &trans &trans
        >;
    };

    navigation {
      bindings = <
        &kp C_REWIND &kp C_FAST_FORWARD &kp C_PREV &kp C_NEXT &kp C_PLAY_PAUSE &trans &kp PG_UP &kp PG_DN &kp HOME &kp END
        &trans &trans &trans &trans &trans                                     &trans &kp UP &kp DOWN &kp LEFT &kp RIGHT
        &kp C_BRI_DN &kp C_BRI_UP &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE         &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &kp LS(SPACE) &trans
        >;
    };

    special {
      bindings = <
        &mc_circumflex_a &mc_circumflex_o &mc_circumflex_e &mc_circumflex_u &mc_circumflex_i   &trans &trans &mc_cedilla_c &trans &trans
        &mc_grave_a &mc_grave_e &mc_acute_e &mc_grave_u &trans                                 &trans &trans &trans &trans &trans
        &trans &trans &mc_trema_e &mc_trema_u &mc_trema_i                                      &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans &trans
        >;
    };

    functions {
      bindings = <
        &trans &trans &trans &trans &trans     &trans &kp F5 &kp F6 &kp F7 &kp F8
        &trans &trans &trans &trans &trans     &trans &kp F1 &kp F2 &kp F3 &kp F4
        &trans &trans &trans &trans &trans     &trans &kp F9 &kp F10 &kp F11 &kp F12
        &trans &trans &trans &trans &trans &trans
        >;
    };

    hardware {
      bindings = <
        &none &none &bt BT_PRV &bt BT_NXT &bt BT_CLR                         &none &none &none &none &none
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &none &none &none &none &none
        &none &none &none &none &none                                        &none &none &none &none &none
        &trans &trans &trans &trans &trans &trans
        >;
    };

    // tri {
    //   bindings = <
    //     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &none &kp F5 &kp F6 &kp F7 &kp F8
    //     &kp LALT &kp LGUI &kp LSHFT &kp LCTRL &bt BT_CLR                     &none &kp F1 &kp F2 &kp F3 &kp F4
    //     &none &none &none &none &none                                        &none &kp F9 &kp F10 &kp F11 &kp F12
    //     &trans &trans &trans &trans
    //     >;
    // };
  };
};
